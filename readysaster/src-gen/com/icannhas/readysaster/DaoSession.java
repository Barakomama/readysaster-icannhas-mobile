package com.icannhas.readysaster;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

import com.icannhas.readysaster.Data;
import com.icannhas.readysaster.PersonalDetails;
import com.icannhas.readysaster.Location;
import com.icannhas.readysaster.Structure;

import com.icannhas.readysaster.DataDao;
import com.icannhas.readysaster.PersonalDetailsDao;
import com.icannhas.readysaster.LocationDao;
import com.icannhas.readysaster.StructureDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig dataDaoConfig;
    private final DaoConfig personalDetailsDaoConfig;
    private final DaoConfig locationDaoConfig;
    private final DaoConfig structureDaoConfig;

    private final DataDao dataDao;
    private final PersonalDetailsDao personalDetailsDao;
    private final LocationDao locationDao;
    private final StructureDao structureDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        dataDaoConfig = daoConfigMap.get(DataDao.class).clone();
        dataDaoConfig.initIdentityScope(type);

        personalDetailsDaoConfig = daoConfigMap.get(PersonalDetailsDao.class).clone();
        personalDetailsDaoConfig.initIdentityScope(type);

        locationDaoConfig = daoConfigMap.get(LocationDao.class).clone();
        locationDaoConfig.initIdentityScope(type);

        structureDaoConfig = daoConfigMap.get(StructureDao.class).clone();
        structureDaoConfig.initIdentityScope(type);

        dataDao = new DataDao(dataDaoConfig, this);
        personalDetailsDao = new PersonalDetailsDao(personalDetailsDaoConfig, this);
        locationDao = new LocationDao(locationDaoConfig, this);
        structureDao = new StructureDao(structureDaoConfig, this);

        registerDao(Data.class, dataDao);
        registerDao(PersonalDetails.class, personalDetailsDao);
        registerDao(Location.class, locationDao);
        registerDao(Structure.class, structureDao);
    }
    
    public void clear() {
        dataDaoConfig.getIdentityScope().clear();
        personalDetailsDaoConfig.getIdentityScope().clear();
        locationDaoConfig.getIdentityScope().clear();
        structureDaoConfig.getIdentityScope().clear();
    }

    public DataDao getDataDao() {
        return dataDao;
    }

    public PersonalDetailsDao getPersonalDetailsDao() {
        return personalDetailsDao;
    }

    public LocationDao getLocationDao() {
        return locationDao;
    }

    public StructureDao getStructureDao() {
        return structureDao;
    }

}
